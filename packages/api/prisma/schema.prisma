// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  EMPLOYER
  CANDIDATE
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  first_name String
  last_name  String
  password   String
  type       UserType
  avatar     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employer  Employer?
  candidate Candidate?
}

model Employer {
  id                 Int         @id @default(autoincrement())
  user_id            Int        @unique
  company_name       String
  company_size       CompanySize
  logo               String
  website            String
  description        String
  social_media_links Json
  industry_id        Int
  email_verified_at  DateTime?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt

  user               User @relation(fields: [user_id], references: [id])
  industry           Industry @relation(fields: [industry_id], references: [id])
  jobs               Job[]
}

model Candidate {
  id                 Int         @id @default(autoincrement())
  user_id            Int       @unique
  first_name         String
  last_name          String
  avatar             String
  email              String
  phone              String?
  address            String
  social_media_links Json?
  looking_for_job    Boolean
  email_verified_at  DateTime?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt

  user               User @relation(fields: [user_id], references: [id])
  skills             CandidateSkill[]
  bookmarks          CandidateBookmark[]
}

model CandidateSkill {
  id         Int      @id @default(autoincrement())
  name       String
  user_id    Int
  skill_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  candidate Candidate @relation(fields: [user_id], references: [id])
  skill     Skill @relation(fields: [skill_id], references: [id])
	@@map("UserSkill")
}

model Skill {
  id         Int      @id @default(autoincrement())
  name       String
  industry_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  user_skill CandidateSkill[]
  industry   Industry @relation(fields: [industry_id], references: [id])
  jobs       JobSkill[]
}

model Industry {
  id         Int      @id @default(autoincrement())
  name       String
  employers  Employer[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  skills     Skill[]
}

model Job {
  id                 Int         @id @default(autoincrement())
  employer_id        Int
  title              String
  location           String
  description        String
  type               JobType
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employer           Employer @relation(fields: [employer_id], references: [id])
  candidates         CandidateBookmark[]
  skills             JobSkill[]
}

model JobSkill {
  id         Int      @id @default(autoincrement())
  job_id     Int
  skill_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  job        Job @relation(fields: [job_id], references: [id])
  skill      Skill @relation(fields: [skill_id], references: [id])
}

model CandidateBookmark {
  id         Int      @id @default(autoincrement())
  candidate_id Int
  job_id      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  candidate   Candidate @relation(fields: [candidate_id], references: [id])
  job         Job @relation(fields: [job_id], references: [id])
}
